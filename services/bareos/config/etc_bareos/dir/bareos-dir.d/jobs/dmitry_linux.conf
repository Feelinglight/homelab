
Job {
  Name = DmitryLinuxJob
  JobDefs = BaseJob
  # Enabled = no

  Client = DmitryLinux
  File Set = DmitryLinuxFileSet
  Pool = DmitryLinuxPool

  # 0 в имени для красивой сортировки с файлами томов, там в этом месте количество томов
  Write Bootstrap = "/backups/DmitryLinux/%j-%i-0-%l.bsr"
}


Client {
  Name = DmitryLinux
  Passive = yes

  Address = "{{BAREOS__FD_DMITRY_ADDRESS}}"
  Password = "{{BAREOS__FD_DMITRY_PASSWORD}}"
}


FileSet {
  Name = DmitryLinuxFileSet

  Include {
    Options {
      Compression = GZIP
      Signature = XXH128
    }

    File = /home/dmitry
    File = /home/dmitry/.local/share/zoxide
    File = /etc/bareos

    Exclude Dir Containing = .nobackup
  }

  Exclude {
    File = /home/dmitry/snap

    File = /home/dmitry/.local
    File = /home/dmitry/.cache

    File = /home/dmitry/.java
    File = /home/dmitry/.dotnet
    File = /home/dmitry/.npm

    File = /home/dmitry/.oh-my-zsh
    File = /home/dmitry/.vscode
    File = /home/dmitry/.jupyter
    File = /home/dmitry/.ipython
  }
}


Storage {
  Name = DmitryLinuxStorage

  Address = "{{BAREOS__SD_ADDRESS}}"
  Password = "{{BAREOS__SD_PASSWORD}}"

  Device = DmitryLinuxDevice
  Media Type = DmitryLinuxDeviceMT
}


Pool {
  Name = DmitryLinuxPool
  Storage = DmitryLinuxStorage

  # NumVols нужно, потому что с Maximum Volume Bytes bareos будет пытаться создать
  # файлы с одинаковыми именами
  Label Format = "$JobName-$JobId-$NumVols-$Level.vol"

  # На случай, если бэкапы будут заливаться на удаленный файловый сервер
  # (там бывают ограничения по максимальному размеру файла)
  Maximum Volume Bytes = 3 gb

  # Гарантирует, что разные job-ы будут писать в разные тома
  Maximum Volume Jobs = 1

  # Скрипты в RunBefore у job обеспечивают удаление устаревших томов (скользящее окно)
  Recycle = no
}
