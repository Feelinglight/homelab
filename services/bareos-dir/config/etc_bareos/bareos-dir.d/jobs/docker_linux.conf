
Job {
  Name = DockerLinuxJob
  JobDefs = BaseJob
  Enabled = no

  Schedule = EveryMinute
  # 1 полный, 2 инкрементальных
  Max Full Interval = 2 minutes

  Client = DockerLinux
  File Set = DockerLinuxFileSet
  Pool = DockerLinuxPool

  # 0 в имени для красивой сортировки с файлами томов, там в этом месте количество томов
  Write Bootstrap = "/backups/DockerLinux/%j-%i-0-%l.bsr"

  # Добавляет файл в папку, которую нужно бэкапить. Чтобы инкременты были не пустыми
  RunScript {
    RunsWhen = Before
    FailJobOnError = Yes
    Command = "sh -c 'echo %j > /docker-fd-data/%j'"
  }
}


Client {
  Name = DockerLinux
  Passive = yes

  Address = "{{BAREOS__FD_DOCKER_ADDRESS}}"
  Password = "{{BAREOS__FD_DOCKER_PASSWORD}}"
}


FileSet {
  Name = DockerLinuxFileSet

  Include {
    Options {
      Compression = GZIP
      Signature = XXH128
      # Sparse = yes
    }

    File = /docker-fd-data
    Exclude Dir Containing = .nobackup
  }

  Exclude {
    File = /docker-fd-data/snap

    File = /docker-fd-data/.config
    File = /docker-fd-data/.local
    File = /docker-fd-data/.cache

    File = /docker-fd-data/.java
    File = /docker-fd-data/.dotnet
    File = /docker-fd-data/.npm

    File = /docker-fd-data/.oh-my-zsh
    File = /docker-fd-data/.vscode
    File = /docker-fd-data/.jupyter
    File = /docker-fd-data/.ipython
  }
}

Schedule {
  Name = EveryMinute
  # Enabled = no

  Run = hourly at 0:00
  Run = hourly at 0:01
  Run = hourly at 0:02
  Run = hourly at 0:03
  Run = hourly at 0:04
  Run = hourly at 0:05
  Run = hourly at 0:06
  Run = hourly at 0:07
  Run = hourly at 0:08
  Run = hourly at 0:09
  Run = hourly at 0:10
  Run = hourly at 0:11
  Run = hourly at 0:12
  Run = hourly at 0:13
  Run = hourly at 0:14
  Run = hourly at 0:15
  Run = hourly at 0:16
  Run = hourly at 0:17
  Run = hourly at 0:18
  Run = hourly at 0:19
  Run = hourly at 0:20
  Run = hourly at 0:21
  Run = hourly at 0:22
  Run = hourly at 0:23
  Run = hourly at 0:24
  Run = hourly at 0:25
  Run = hourly at 0:26
  Run = hourly at 0:27
  Run = hourly at 0:28
  Run = hourly at 0:29
  Run = hourly at 0:30
  Run = hourly at 0:31
  Run = hourly at 0:32
  Run = hourly at 0:33
  Run = hourly at 0:34
  Run = hourly at 0:35
  Run = hourly at 0:36
  Run = hourly at 0:37
  Run = hourly at 0:38
  Run = hourly at 0:39
  Run = hourly at 0:40
  Run = hourly at 0:41
  Run = hourly at 0:42
  Run = hourly at 0:43
  Run = hourly at 0:44
  Run = hourly at 0:45
  Run = hourly at 0:46
  Run = hourly at 0:47
  Run = hourly at 0:48
  Run = hourly at 0:49
  Run = hourly at 0:50
  Run = hourly at 0:51
  Run = hourly at 0:52
  Run = hourly at 0:53
  Run = hourly at 0:54
  Run = hourly at 0:55
  Run = hourly at 0:56
  Run = hourly at 0:57
  Run = hourly at 0:58
  Run = hourly at 0:59
}

Storage {
  Name = DockerLinuxStorage

  Address = "{{BAREOS__SD_ADDRESS}}"
  Password = "{{BAREOS__SD_PASSWORD}}"

  Device = DockerLinuxDevice
  Media Type = DockerLinuxDeviceMT
}


Pool {
  Name = DockerLinuxPool
  Storage = DockerLinuxStorage

  # NumVols нужно, потому что с Maximum Volume Bytes bareos будет пытаться создать
  # файлы с одинаковыми именами
  Label Format = "$JobName-$JobId-$NumVols-$Level.vol"

  # На случай, если бэкапы будут заливаться на удаленный файловый сервер
  # (там бывают ограничения по максимальному размеру файла)
  Maximum Volume Bytes = 100 mb

  # Гарантирует, что разные job-ы будут писать в разные тома
  Maximum Volume Jobs = 1

  # Скрипты в RunBefore у job обеспечивают удаление устаревших томов (скользящее окно)
  Recycle = no
}

